// THIS FILE IS GENERATED BY TOOL, PLEASE DON'T EDIT

#ifndef _XML_LOADER_H_
#define _XML_LOADER_H_

#include <map>
#include <vector>
#include <functional>

#include "tinyxml.h"
#include "cocos2d.h"

template <typename T>
class XMLLoader
{0}
	friend class XMLManager;
public:
	XMLLoader();
	~XMLLoader();

	const T* queryById(int id) const;
	const std::vector<T*> queryByCallback(std::function<bool(const T*)> callback);

protected:
	void load(const TiXmlElement* rootElement);

protected:
	std::map<int, T*> m_mData;
{1};

template <typename T>
XMLLoader<T>::XMLLoader()
{0}
{1}

template <typename T>
XMLLoader<T>::~XMLLoader()
{0}
	auto iter = m_mData.begin();
	for (; iter != m_mData.end(); ++iter) {0}
		CC_SAFE_DELETE(iter->second);
	{1}
	m_mData.clear();
{1}

template <typename T>
const T* XMLLoader<T>::queryById(int id) const
{0}
	auto iter = m_mData.find(id);
	if (iter != m_mData.end()) {0}
		return iter->second;
	{1}
	return nullptr;
{1}

template <typename T>
const std::vector<T*> XMLLoader<T>::queryByCallback(std::function<bool(const T*)> callback)
{0}
	std::vector<T*> ret;
	auto iter = m_mData.begin();
	for (; iter != m_mData.end(); ++iter) {0}
		if (callback(iter->second)) {0}
			ret.push_back(iter->second);
		{1}
	{1}
	return ret;
{1}

template <typename T>
void XMLLoader<T>::load(const TiXmlElement* rootElement)
{0}
#ifndef XML_ROW_ELEMENT_NAME
#define XML_ROW_ELEMENT_NAME "{2}"
#endif

	const TiXmlElement* element = rootElement->FirstChildElement(XML_ROW_ELEMENT_NAME);
	while (element) {0}
		T* item = new T(element);
		m_mData[item->id] = item;
		element = element->NextSiblingElement(XML_ROW_ELEMENT_NAME);
	{1}
{1}

#endif // _XML_LOADER_H_
